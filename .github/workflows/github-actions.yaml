name: Deploy Spring Application to Ec2

on:
  push:
    branches: [ "feat/member" ]

# 워크플로우가 저장소의 콘텐츠를 읽을 수 있는 권한을 갖도록 설정
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Make application.yaml
        run: |
          cd ./be/issue-tracker/src/main
          mkdir resources
          cd resources
          touch application.yaml
          echo "${{ secrets.YAML }}" > ./application.yaml
        shell: bash

      - name: Grant execute permission for gradlew
        run: |
          cd ./be/issue-tracker
          chmod +x gradlew

      - name: Build with Gradle
        run: |
          cd ./be/issue-tracker
          ./gradlew clean build -x test

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      - name: Docker build & push to docker repo
        run: |
          cd ./be/issue-tracker 
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:latest

      # 서버에 접속 후 Docker 이미지 가져와서 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:latest .
            # 기존에 실행 중인 컨테이너 중지 및 삭제
            if [ $(sudo docker ps -q -f name=spring-server) ]; then
              sudo docker stop spring-server
              sudo docker rm spring-server
            fi
            # 새로운 컨테이너 실행
              sudo docker run -d -p 8080:8080 --name spring-server ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}
